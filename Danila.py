import os
from flask import Flask, render_template, request, redirect, url_for, flash, jsonify
from flask_sqlalchemy import SQLAlchemy
from werkzeug.utils import secure_filename
from datetime import datetime

app = Flask(__name__)
app.secret_key = 'danila-secret-key-here'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///danila.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['UPLOAD_FOLDER'] = 'static/uploads'
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024

db = SQLAlchemy(app)

# –ú–æ–¥–µ–ª—å —Ç–∏–ø–∞ –ø–∏–Ω–∫–∞
class KickType(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(50), nullable=False, unique=True)
    damage = db.Column(db.Integer, default=1)
    kicks = db.relationship('Kick', backref='kick_type', lazy=True)

# –ú–æ–¥–µ–ª—å –ø–∏–Ω–∫–∞
class Kick(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    kicker_name = db.Column(db.String(100), nullable=False)
    power = db.Column(db.Integer, default=1)
    timestamp = db.Column(db.DateTime, default=datetime.utcnow)
    kick_type_id = db.Column(db.Integer, db.ForeignKey('kick_type.id'))
    image = db.Column(db.String(100))  # –∫–∞—Ä—Ç–∏–Ω–∫–∞ –ø–∏–Ω–∫–∞

# –ú–æ–¥–µ–ª—å –î–∞–Ω–∏–ª—ã
class Danila(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), default='–î–∞–Ω–∏–ª–∞')
    health = db.Column(db.Integer, default=100)
    total_kicks_received = db.Column(db.Integer, default=0)
    last_kicked = db.Column(db.DateTime)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î —Å —Ç–∏–ø–∞–º–∏ –ø–∏–Ω–∫–æ–≤
def init_db():
    with app.app_context():
        db.create_all()
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã –ø–∏–Ω–∫–æ–≤, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if not KickType.query.first():
            default_kicks = [
                {'name': '–õ–µ–≥–∫–∏–π —â–µ–ª–±–∞–Ω', 'damage': 1},
                {'name': '–°—Ä–µ–¥–Ω–∏–π –ø–∏–Ω–æ–∫', 'damage': 3},
                {'name': '–ú–æ—â–Ω—ã–π —É–¥–∞—Ä', 'damage': 5},
                {'name': '–°–≤–µ—Ä—Ö—Å–∏–ª—å–Ω—ã–π –ø–∏–Ω–æ–∫', 'damage': 10},
                {'name': '–£–ª—å—Ç—Ä–∞-–º–µ–≥–∞-–ø–∏–Ω–æ–∫', 'damage': 15}
            ]
            for kick_data in default_kicks:
                kick_type = KickType(name=kick_data['name'], damage=kick_data['damage'])
                db.session.add(kick_type)
            
            # –°–æ–∑–¥–∞–µ–º –î–∞–Ω–∏–ª—É, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if not Danila.query.first():
                danila = Danila(name='–î–∞–Ω–∏–ª–∞', health=100, total_kicks_received=0)
                db.session.add(danila)
            
            db.session.commit()

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–∏–Ω–∫–æ–≤
@app.route('/')
def index():
    kick_type_id = request.args.get('kick_type_id', type=int)
    search_query = request.args.get('q', '')
    
    # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–∏–Ω–∫–æ–≤
    query = Kick.query
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –ø–∏–Ω–∫–∞
    if kick_type_id:
        query = query.filter(Kick.kick_type_id == kick_type_id)
    
    # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –ø–∏–Ω–∞—é—â–µ–≥–æ
    if search_query:
        query = query.filter(Kick.kicker_name.ilike(f'%{search_query}%'))
    
    kicks = query.order_by(Kick.timestamp.desc()).limit(50).all()
    kick_types = KickType.query.order_by(KickType.damage).all()
    danila = Danila.query.first()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_kicks = Kick.query.count()
    today_kicks = Kick.query.filter(
        db.func.date(Kick.timestamp) == datetime.today().date()
    ).count()
    
    return render_template('index.html', 
                         kicks=kicks, 
                         kick_types=kick_types, 
                         danila=danila,
                         selected_kick_type_id=kick_type_id,
                         search_query=search_query,
                         total_kicks=total_kicks,
                         today_kicks=today_kicks)

# –ü–∏–Ω–∞–Ω–∏–µ –î–∞–Ω–∏–ª—ã
@app.route('/kick_danila', methods=['POST'])
def kick_danila():
    danila = Danila.query.first()
    if not danila:
        flash('–î–∞–Ω–∏–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!', 'error')
        return redirect(url_for('index'))

    try:
        kick_type_id = request.form.get('kick_type_id')
        kick_type = KickType.query.get(kick_type_id) if kick_type_id else None
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–∏–Ω–∫–µ
        kick = Kick(
            kicker_name=request.form['kicker_name'] or '–ê–Ω–æ–Ω–∏–º',
            power=kick_type.damage if kick_type else 1,
            kick_type_id=kick_type_id
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –î–∞–Ω–∏–ª—ã
        damage = kick_type.damage if kick_type else 1
        danila.health = max(0, danila.health - damage)
        danila.total_kicks_received += 1
        danila.last_kicked = datetime.utcnow()
        
        db.session.add(kick)
        db.session.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ "—É–º–µ—Ä" –ª–∏ –î–∞–Ω–∏–ª–∞
        if danila.health <= 0:
            flash(f'–î–∞–Ω–∏–ª–∞ –ø–æ–ª—É—á–∏–ª —Å–º–µ—Ä—Ç–µ–ª—å–Ω—ã–π —É–¥–∞—Ä –æ—Ç {kick.kicker_name}! üíÄ', 'error')
        else:
            flash(f'–î–∞–Ω–∏–ª–∞ —É—Å–ø–µ—à–Ω–æ –ø–∏–Ω–Ω—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {kick.kicker_name}! üí•', 'success')
            
    except Exception as e:
        db.session.rollback()
        flash(f'–û—à–∏–±–∫–∞ –ø–∏–Ω–∫–∞: {str(e)}', 'error')
    
    return redirect(url_for('index'))

# –õ–µ—á–µ–Ω–∏–µ –î–∞–Ω–∏–ª—ã
@app.route('/heal_danila', methods=['POST'])
def heal_danila():
    danila = Danila.query.first()
    if not danila:
        flash('–î–∞–Ω–∏–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!', 'error')
        return redirect(url_for('index'))

    try:
        heal_amount = int(request.form.get('heal_amount', 20))
        danila.health = min(100, danila.health + heal_amount)
        db.session.commit()
        flash(f'–î–∞–Ω–∏–ª–∞ –≤—ã–ª–µ—á–µ–Ω –Ω–∞ {heal_amount} HP! ‚ù§Ô∏è', 'success')
    except Exception as e:
        db.session.rollback()
        flash(f'–û—à–∏–±–∫–∞ –ª–µ—á–µ–Ω–∏—è: {str(e)}', 'error')
    
    return redirect(url_for('index'))

# –°–±—Ä–æ—Å –î–∞–Ω–∏–ª—ã (–Ω–æ–≤—ã–π –î–∞–Ω–∏–ª–∞)
@app.route('/reset_danila', methods=['POST'])
def reset_danila():
    try:
        danila = Danila.query.first()
        if danila:
            danila.health = 100
            danila.total_kicks_received = 0
            danila.last_kicked = None
            db.session.commit()
            flash('–î–∞–Ω–∏–ª–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! üîÑ', 'success')
        else:
            new_danila = Danila(name='–î–∞–Ω–∏–ª–∞', health=100, total_kicks_received=0)
            db.session.add(new_danila)
            db.session.commit()
            flash('–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –î–∞–Ω–∏–ª–∞! üë∂', 'success')
    except Exception as e:
        db.session.rollback()
        flash(f'–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞: {str(e)}', 'error')
    
    return redirect(url_for('index'))

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ –ø–∏–Ω–∫–∞
@app.route('/add_kick_type', methods=['POST'])
def add_kick_type():
    kick_name = request.form.get('kick_name', '').strip()
    damage = request.form.get('damage', 1, type=int)
    
    if not kick_name:
        flash('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∏–Ω–∫–∞', 'error')
        return redirect(url_for('index'))
    
    try:
        if KickType.query.filter_by(name=kick_name).first():
            flash('–¢–∞–∫–æ–π —Ç–∏–ø –ø–∏–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'error')
        else:
            kick_type = KickType(name=kick_name, damage=damage)
            db.session.add(kick_type)
            db.session.commit()
            flash('–¢–∏–ø –ø–∏–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω', 'success')
    except Exception as e:
        db.session.rollback()
        flash(f'–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {str(e)}', 'error')
    
    return redirect(url_for('index'))

# API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–º–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è –¥–ª—è AJAX)
@app.route('/api/danila_status')
def danila_status():
    danila = Danila.query.first()
    if danila:
        return jsonify({
            'health': danila.health,
            'total_kicks': danila.total_kicks_received,
            'last_kicked': danila.last_kicked.isoformat() if danila.last_kicked else None
        })
    return jsonify({'error': '–î–∞–Ω–∏–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω'})

# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –ø–∏–Ω–∫–µ
@app.route('/delete_kick/<int:kick_id>', methods=['POST'])
def delete_kick(kick_id):
    kick = Kick.query.get(kick_id)
    if not kick:
        flash('–ó–∞–ø–∏—Å—å –æ –ø–∏–Ω–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'error')
        return redirect(url_for('index'))

    try:
        db.session.delete(kick)
        db.session.commit()
        flash('–ó–∞–ø–∏—Å—å –æ –ø–∏–Ω–∫–µ —É–¥–∞–ª–µ–Ω–∞', 'success')
    except Exception as e:
        db.session.rollback()
        flash(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}', 'error')
    
    return redirect(url_for('index'))

if __name__ == '__main__':
    os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)
    init_db()
    app.run(debug=True)
